==19024== Memcheck, a memory error detector
==19024== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==19024== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==19024== Command: ./cpp_indie_studio
==19024== 
==19024== Warning: set address range perms: large range [0x7f51b42b9000, 0x7f51c4871000) (defined)
==19024== Warning: set address range perms: large range [0x7f51b42b9000, 0x7f51c4871000) (noaccess)
==19024== Warning: set address range perms: large range [0x7f51b42b9000, 0x7f51c4871000) (defined)
==19024== Warning: set address range perms: large range [0x7f51b42b9000, 0x7f51c4871000) (noaccess)
==19024== Thread 4:
==19024== Conditional jump or move depends on uninitialised value(s)
==19024==    at 0x4CC137: irr::video::CNullDriver::createImageFromFile(irr::io::IReadFile*) (CNullDriver.cpp:1342)
==19024==    by 0x4C9AEC: irr::video::CNullDriver::loadTextureFromFile(irr::io::IReadFile*, irr::core::string<char, irr::core::irrAllocator<char> > const&) (CNullDriver.cpp:504)
==19024==    by 0x4C98D9: irr::video::CNullDriver::getTexture(irr::core::string<char, irr::core::irrAllocator<char> > const&) (CNullDriver.cpp:452)
==19024==    by 0x5FE5EE: irr::scene::COBJMeshFileLoader::readTextures(char const*, char const*, irr::scene::COBJMeshFileLoader::SObjMtl*, irr::core::string<char, irr::core::irrAllocator<char> > const&) (COBJMeshFileLoader.cpp:446)
==19024==    by 0x5FEED4: irr::scene::COBJMeshFileLoader::readMTL(char const*, irr::core::string<char, irr::core::irrAllocator<char> > const&) (COBJMeshFileLoader.cpp:605)
==19024==    by 0x5FCEFB: irr::scene::COBJMeshFileLoader::createMesh(irr::io::IReadFile*) (COBJMeshFileLoader.cpp:107)
==19024==    by 0x48325F: irr::scene::CSceneManager::getMesh(irr::core::string<char, irr::core::irrAllocator<char> > const&) (CSceneManager.cpp:396)
==19024==    by 0x4169FB: is::BombsT::BombsT(is::map&, irr::video::IVideoDriver&, irr::scene::ISceneManager&)::{lambda(irr::core::vector3d<float> const&, int)#1}::operator()(irr::core::vector3d<float> const&, int) const (in /home/vincent/rendu/Indie_Studio/cpp_indie_studio/map/cpp_indie_studio)
==19024==    by 0x41716C: std::_Function_handler<void (irr::core::vector3d<float> const&, int), is::BombsT::BombsT(is::map&, irr::video::IVideoDriver&, irr::scene::ISceneManager&)::{lambda(irr::core::vector3d<float> const&, int)#1}>::_M_invoke(std::_Any_data const&, irr::core::vector3d<float> const&, int&&) (in /home/vincent/rendu/Indie_Studio/cpp_indie_studio/map/cpp_indie_studio)
==19024==    by 0x419F5D: std::function<void (irr::core::vector3d<float> const&, int)>::operator()(irr::core::vector3d<float> const&, int) const (in /home/vincent/rendu/Indie_Studio/cpp_indie_studio/map/cpp_indie_studio)
==19024==    by 0x419EF4: void std::_Bind_simple<std::function<void (irr::core::vector3d<float> const&, int)> (irr::core::vector3d<float>, int)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (in /home/vincent/rendu/Indie_Studio/cpp_indie_studio/map/cpp_indie_studio)
==19024==    by 0x419DAD: std::_Bind_simple<std::function<void (irr::core::vector3d<float> const&, int)> (irr::core::vector3d<float>, int)>::operator()() (in /home/vincent/rendu/Indie_Studio/cpp_indie_studio/map/cpp_indie_studio)
==19024== 
==19024== 
==19024== Process terminating with default action of signal 2 (SIGINT)
==19024==    at 0x587F7A7: __pthread_mutex_lock_full (pthread_mutex_lock.c:343)
==19024==    by 0x99931BD: pa_mutex_lock (in /usr/lib/x86_64-linux-gnu/pulseaudio/libpulsecommon-8.0.so)
==19024==    by 0xBDB69B4: ??? (in /usr/lib/x86_64-linux-gnu/alsa-lib/libasound_module_pcm_pulse.so)
==19024==    by 0x8E719F3: ??? (in /usr/lib/x86_64-linux-gnu/libasound.so.2.0.0)
==19024==    by 0x8E7203E: ??? (in /usr/lib/x86_64-linux-gnu/libasound.so.2.0.0)
==19024==    by 0x52C3457: ??? (in /home/vincent/rendu/Indie_Studio/cpp_indie_studio/irrKlang-64bit-1.5.0/bin/linux-gcc-64/libIrrKlang.so)
==19024==    by 0x52CAF73: ??? (in /home/vincent/rendu/Indie_Studio/cpp_indie_studio/irrKlang-64bit-1.5.0/bin/linux-gcc-64/libIrrKlang.so)
==19024==    by 0x52D1A09: ??? (in /home/vincent/rendu/Indie_Studio/cpp_indie_studio/irrKlang-64bit-1.5.0/bin/linux-gcc-64/libIrrKlang.so)
==19024==    by 0x587D6B9: start_thread (pthread_create.c:333)
==19024==    by 0x643A82C: clone (clone.S:109)
==19024== 
==19024== HEAP SUMMARY:
==19024==     in use at exit: 492,573,239 bytes in 64,803 blocks
==19024==   total heap usage: 264,670 allocs, 199,867 frees, 1,054,212,009 bytes allocated
==19024== 
==19024== LEAK SUMMARY:
==19024==    definitely lost: 276,046,349 bytes in 68 blocks
==19024==    indirectly lost: 0 bytes in 0 blocks
==19024==      possibly lost: 30,821,422 bytes in 60,934 blocks
==19024==    still reachable: 185,705,468 bytes in 3,801 blocks
==19024==                       of which reachable via heuristic:
==19024==                         newarray           : 6,344 bytes in 1 blocks
==19024==                         multipleinheritance: 1,944 bytes in 3 blocks
==19024==         suppressed: 0 bytes in 0 blocks
==19024== Rerun with --leak-check=full to see details of leaked memory
==19024== 
==19024== For counts of detected and suppressed errors, rerun with: -v
==19024== Use --track-origins=yes to see where uninitialised values come from
==19024== ERROR SUMMARY: 3 errors from 1 contexts (suppressed: 0 from 0)
